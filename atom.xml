<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ReOranJuice</title>
  
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ronjod.github.io/"/>
  <updated>2019-04-09T03:27:15.567Z</updated>
  <id>https://ronjod.github.io/</id>
  
  <author>
    <name>ReOranJuice</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javaNew</title>
    <link href="https://ronjod.github.io/2019/04/08/javaNew/"/>
    <id>https://ronjod.github.io/2019/04/08/javaNew/</id>
    <published>2019-04-08T12:44:13.000Z</published>
    <updated>2019-04-09T03:27:15.567Z</updated>
    
    <content type="html"><![CDATA[<p>由于自己太菜，啥也不会，为了整理用到的java应该要掌握的最基础方法。</p><p>题目做过来感觉编码上，自己对java数组和集合这块掌握还太欠缺。</p><h4 id="预定数组与集合的区别-https-www-cnblogs-com-summers-p-4094260-html"><a href="#预定数组与集合的区别-https-www-cnblogs-com-summers-p-4094260-html" class="headerlink" title="(预定数组与集合的区别)[https://www.cnblogs.com/summers/p/4094260.html]"></a><strong>(预定数组与集合的区别)[<a href="https://www.cnblogs.com/summers/p/4094260.html]" target="_blank" rel="noopener">https://www.cnblogs.com/summers/p/4094260.html]</a></strong></h4><p>数组Array和集合的区别：</p><p>(1)数组是大小固定的，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）</p><p>(2)JAVA集合可以存储和操作数目不固定的一组数据。 (3)若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，array不适用。</p><p>联系：使用相应的toArray()和Arrays.asList()方法可以回想转换。</p><p>一.集合的体系结构：</p><p>List、Set、Map是这个集合体系中最主要的三个接口。 List和Set继承自Collection接口。 Map也属于集合系统，但和Collection接口不同。</p><p>Set不允许元素重复。HashSet和TreeSet是两个主要的实现类。Set 只能通过游标来取值，并且值是不能重复的。</p><p>List有序且允许元素重复。ArrayList、LinkedList和Vector是三个主要的实现类。 ArrayList 是线程不安全的， Vector 是线程安全的，这两个类底层都是由数组实现的 LinkedList 是线程不安全的，底层是由链表实现的</p><p>Map 是键值对集合。其中key列就是一个集合，key不能重复，但是value可以重复。 HashMap、TreeMap和Hashtable是Map的三个主要的实现类。 HashTable 是线程安全的，不能存储 null 值 HashMap 不是线程安全的，可以存储 null 值</p><p>二.List和ArrayList的区别</p><p>　　1.List是接口，List特性就是有序,会确保以一定的顺序保存元素.</p><p>　　ArrayList是它的实现类,是一个用数组实现的List.</p><p>　　Map是接口,Map特性就是根据一个对象查找对象.</p><p>　　HashMap是它的实现类,HashMap用hash表实现的Map,就是利用对象的hashcode(hashcode()是Object的方法)进行快速散列查找.(关于散列查找,可以参看&lt;&lt;数据结构&gt;&gt;)</p><p>　　2.一般情况下,如果没有必要,推荐代码只同List,Map接口打交道.</p><p>　　比如:List list = new ArrayList();</p><p>　　这样做的原因是list就相当于是一个泛型的实现,如果想改变list的类型,只需要:</p><p>　　List list = new LinkedList();//LinkedList也是List的实现类,也是ArrayList的兄弟类</p><p>　　这样,就不需要修改其它代码,这就是接口编程的优雅之处.</p><p>　　另外的例子就是,在类的方法中,如下声明:</p><p>　　private void doMyAction(List list){}</p><p>　　这样这个方法能处理所有实现了List接口的类,一定程度上实现了泛型函数.</p><p>　　3.如果开发的时候觉得ArrayList,HashMap的性能不能满足你的需要,可以通过实现List,Map(或者Collection)来定制你的自定义类</p><p>大体这样，随便放着e</p><p><a href="https://blog.csdn.net/manduner/article/details/79982287" target="_blank" rel="noopener">https://blog.csdn.net/manduner/article/details/79982287</a></p><h4 id="关于集合与数组的转换"><a href="#关于集合与数组的转换" class="headerlink" title="关于集合与数组的转换"></a><strong>关于集合与数组的转换</strong></h4><p>参考自 <a href="https://blog.csdn.net/thebigdipperbdx/article/details/80515714" target="_blank" rel="noopener">目标网站</a></p><p>集合转为数组<br>java.util.Collection.toArray(T[] a)</p><p>数组转为集合<br>java.util.Arrays.toList(T…a)</p><p><strong>集合转数组</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//构建集合</span><br><span class="line">List&lt;String&gt; list =new ArrayList&lt;&gt;();</span><br><span class="line">list.add(&quot;&quot;);</span><br><span class="line">list.add(&quot;&quot;);</span><br><span class="line">//转为数组</span><br><span class="line">String[] strings=list.toArray(new String[list.size()]);</span><br><span class="line">//遍历</span><br><span class="line">for(String a:String[])</span><br><span class="line">sout(a);</span><br></pre></td></tr></table></figure></p><p>此时可以利用Arrays.sort进行排序</p><p><strong>数组转集合</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String []arr=new String[]&#123;&quot;&quot;,&quot;&quot;,&quot;&quot;&#125;;</span><br><span class="line">//转换</span><br><span class="line">List &lt;String&gt;list=Arrays.asList(arr);</span><br><span class="line">//遍历</span><br><span class="line">list.forEach(n-&gt;sout(n));//算是集合比较好的遍历方式利用了iterator迭代器.</span><br><span class="line">Iterator iterator =list.iterator();</span><br><span class="line">//输出这里用String的不改了</span><br><span class="line">while(iterator.hasNext())&#123;</span><br><span class="line">  int i=(Integer)iterator.next();</span><br><span class="line">  sout(i);//好吧还是用迭代器吧</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后问题又出现了，这样产生的集合是没有过多方法的，连add，remove操作都不具备，实际上还需要用到ArrayList<br>List<string> list =new java.util.ArrayList&lt;&gt;(Arrays.asList(arr));<br>try{//ok啦<br>list.add(“”)<br>}catch(Exception e){e.printStackTrace();}</string></p><h4 id="对于遍历的三种复杂度（强行养成好习惯iterator）"><a href="#对于遍历的三种复杂度（强行养成好习惯iterator）" class="headerlink" title="对于遍历的三种复杂度（强行养成好习惯iterator）"></a><strong>对于遍历的三种复杂度（强行养成好习惯iterator）</strong></h4><p>详情参考 <a href="https://www.cnblogs.com/leskang/p/6031282.html" target="_blank" rel="noopener">https://www.cnblogs.com/leskang/p/6031282.html</a><br>1、传统的for循环遍历，基于计数器的：<br>        顺序存储：读取性能比较高。适用于遍历顺序存储集合。<br>        链式存储：时间复杂度太大，不适用于遍历链式存储的集合。<br>2、迭代器遍历，Iterator：<br>        顺序存储：如果不是太在意时间，推荐选择此方式，毕竟代码更加简洁，也防止了Off-By-One的问题。<br>        链式存储：意义就重大了，平均时间复杂度降为O(n)，还是挺诱人的，所以推荐此种遍历方式。<br>3、foreach循环遍历：<br>        foreach只是让代码更加简洁了，但是他有一些缺点，就是遍历过程中不能操作数据集合（删除等），所以有些场合不使用。而且它本身就是基于Iterator实现的，但是由于类型转换的问题，所以会比直接使用Iterator慢一点，但是还好，时间复杂度都是一样的。所以怎么选择，参考上面两种方式，做一个折中的选择。<br>关于List集合的常用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; it=list.iterator();</span><br><span class="line">while(it.hasNext()) &#123;</span><br><span class="line">    String i = it.next();</span><br><span class="line"></span><br><span class="line">    System.out.println(i);</span><br></pre></td></tr></table></figure><h4 id="部分集合基础操作"><a href="#部分集合基础操作" class="headerlink" title="部分集合基础操作"></a>部分集合基础操作</h4><p><a href="https://www.cnblogs.com/xiaostudy/p/9503199.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaostudy/p/9503199.html</a><br><strong>add方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List list = new ArrayList();</span><br><span class="line">list.add(int index,E element)</span><br></pre></td></tr></table></figure></p><p>如果不写第一个参数的话，默认加到当前集合的尾部，否则在指定位置插入元素，后面的元素都往后移一个元素。。</p><h4 id="数组方法介绍"><a href="#数组方法介绍" class="headerlink" title="数组方法介绍"></a>数组方法介绍</h4><p><a href="https://blog.csdn.net/liu_yanzhao/article/details/70847050" target="_blank" rel="noopener">https://blog.csdn.net/liu_yanzhao/article/details/70847050</a></p><h3 id="StringBuffer和StringBuilder类"><a href="#StringBuffer和StringBuilder类" class="headerlink" title="StringBuffer和StringBuilder类"></a><strong>StringBuffer和StringBuilder类</strong></h3><p><a href="http://www.runoob.com/java/java-stringbuffer.html" target="_blank" rel="noopener">http://www.runoob.com/java/java-stringbuffer.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于自己太菜，啥也不会，为了整理用到的java应该要掌握的最基础方法。&lt;/p&gt;
&lt;p&gt;题目做过来感觉编码上，自己对java数组和集合这块掌握还太欠缺。&lt;/p&gt;
&lt;h4 id=&quot;预定数组与集合的区别-https-www-cnblogs-com-summers-p-409426
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>practise_NK</title>
    <link href="https://ronjod.github.io/2019/04/03/practise-NK/"/>
    <id>https://ronjod.github.io/2019/04/03/practise-NK/</id>
    <published>2019-04-03T02:06:11.000Z</published>
    <updated>2019-04-09T02:48:11.517Z</updated>
    
    <content type="html"><![CDATA[<p>开始准备实习了，自己对java的熟悉度还是太低了，在写题的过程中，有许多基础的东西，完全忘了是怎么用的，啥意思也不知道，也许连一些语法都和c混了，所以在此开始对于牛客里面一些编程题的自己还没彻底掌握的东西，做一些总结。<br>同时也要谢谢牛客网，这个网站，确实很棒，还能参考别人做过的答案，更多的学到东西吧。</p><p>就先不管c++方面的题目了，开始专攻java，让自己熟悉java的编写。</p><p>这里就不说哪些公司哪些题了，也许大家都懂得，直接上题目按做过的一道道来</p><h3 id="查最高分问题"><a href="#查最高分问题" class="headerlink" title="查最高分问题"></a>查最高分问题</h3><p><img src="/2019/04/03/practise-NK/Ques1.png" alt="题1"><br>一开始就是对于测试用例，有些地方没有想到，要用到<strong> in.hasNext() </strong>来使测试用例不断测试，我就说怎么永远只能对一个，不过这个问题牛客貌似也有温馨提示过。<br>对整层嵌套** while(in.hesNext())</p><p>还有split()<br>split作为String类的方法，在此其实可以慢慢扩展<br>e先对split进行熟练掌握吧<br>split对有些特殊字符是不能定义的<br><img src="/2019/04/03/practise-NK/about-split.png" alt="split"><br>第一个参数对于特殊字符需要增加//进行转义，第二个就是根据要求分多少块。</p><p>和Math.max和Math.min</p><h3 id="德州扑克流"><a href="#德州扑克流" class="headerlink" title="德州扑克流"></a>德州扑克流</h3><p>String的方法indexOf(String)匹配参数和原字符串的位置并返回，第二个参数则是从那个地方开始计算。<br><img src="/2019/04/03/practise-NK/indexof.png" alt="indexof"></p><h3 id="huawei笔试-19-04-03"><a href="#huawei笔试-19-04-03" class="headerlink" title="huawei笔试 19/04/03"></a>huawei笔试 19/04/03</h3><p>啊啊啊啊为什么我这么菜，连强制类型转换都忘了，还是代码写得太少欸，加油吧<br>3个题目<br>举例<br>输入<br>3<br>1，2，3，4，5，6，7<br>4，5，6，1，2，3，7，8，9<br>输出<br>1，2，3，4，5，6，4，5，6，1，2，3，7，7，8，9<br>就是按顺序分割数组输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        Scanner sc=new Scanner(System.in);</span><br><span class="line">        int length=0;</span><br><span class="line">        int a=0,start=0;</span><br><span class="line">        char text1[],text2[];</span><br><span class="line">        char tempText;</span><br><span class="line">        String Text=&quot;&quot;;</span><br><span class="line">        while(sc.hasNext())&#123;</span><br><span class="line">            length=sc.nextInt();</span><br><span class="line">//找到逗号的数量，根据逗号分隔</span><br><span class="line">            String array1=sc.nextLine();</span><br><span class="line">            array1.split(&quot;,&quot;);</span><br><span class="line">            text1=array1.toCharArray();</span><br><span class="line"></span><br><span class="line">            System.out.println(text1);</span><br><span class="line">            String array2=sc.nextLine();</span><br><span class="line">            text2=array2.toCharArray();</span><br><span class="line">            char result[]=new char[array1.length()+array2.length()];</span><br><span class="line"></span><br><span class="line">                for(int i=0;i&lt;length;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    a=array1.indexOf(&quot;,&quot;,start);</span><br><span class="line">                    for(int k=0;k&lt;a;k++)</span><br><span class="line">                        result[i+k]=text1[k];</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>第二题<br>有点复杂<br>每行都能输入字符串<br>但是要辨别非法字符串<br>除了数字字母都是非法<br>输出第一要只输出合法的且用空格分隔<br>第二个是非法<br>第三个是向左移位10格<br>第四是根据数字优先，大写优先排序所有字符串</p><p>第三题<br>第一行表示方案<br>第二行有n m x y<br>n表示人，m表示咖啡机，x表示洗咖啡时间，y表示咖啡自然干时间<br>求出最少时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc=new Scanner(System.in);</span><br><span class="line">      int total;</span><br><span class="line">      double n=0;</span><br><span class="line">              int m=0,x=0,y=0,cleanPr=0;</span><br><span class="line">int max=0;</span><br><span class="line">int min=0;</span><br><span class="line">double count=0;//可能存在人多于机器需要成倍</span><br><span class="line"></span><br><span class="line">      while(sc.hasNext())&#123;</span><br><span class="line">          total=sc.nextInt();</span><br><span class="line"></span><br><span class="line">          int[] minTime=new int[total+1];</span><br><span class="line">          for(int i=0;i&lt;total;i++) &#123;</span><br><span class="line">              n = sc.nextInt();</span><br><span class="line">              m = sc.nextInt();</span><br><span class="line">              x = sc.nextInt();</span><br><span class="line">              y = sc.nextInt();</span><br><span class="line"></span><br><span class="line">              int[] timeCoffee=new int[m];</span><br><span class="line">              for (int j = 0; j &lt; m; j++) &#123;</span><br><span class="line">                  timeCoffee[j] = sc.nextInt();</span><br><span class="line"></span><br><span class="line">                  if(j==0)&#123;</span><br><span class="line">                      min=timeCoffee[j];&#125;</span><br><span class="line">                      else if(timeCoffee[j]&lt;min)</span><br><span class="line">                      &#123;</span><br><span class="line">                          min=timeCoffee[j];</span><br><span class="line">                      &#125;</span><br><span class="line">                  if(timeCoffee[j]&gt;max)</span><br><span class="line">                      max=timeCoffee[j];</span><br><span class="line">          &#125;</span><br><span class="line">              //进行计算</span><br><span class="line"></span><br><span class="line">                  if (x &gt;= y)</span><br><span class="line">                  &#123;cleanPr = y;&#125;</span><br><span class="line">                  else</span><br><span class="line">                  &#123;</span><br><span class="line">                      cleanPr=x;</span><br><span class="line">                  &#125;</span><br><span class="line">                  if (m &gt;= n)</span><br><span class="line">                  &#123; minTime[i]= max+cleanPr;&#125;</span><br><span class="line">                  else</span><br><span class="line">                  &#123;</span><br><span class="line">count=Math.ceil(n/m);</span><br><span class="line">                      minTime[i]=(int)(count*min+cleanPr);</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">              max=0;</span><br><span class="line">              cleanPr=0;</span><br><span class="line">          &#125;</span><br><span class="line">          for(int i=0;i&lt;total;i++)&#123;</span><br><span class="line">              System.out.println(minTime[i]);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="网易"><a href="#网易" class="headerlink" title="网易"></a>网易</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = new Scanner(System.in);</span><br><span class="line">       int point = sc.nextInt();</span><br><span class="line">       int saveAns[] = new int[point];</span><br><span class="line">       int count = 0;</span><br><span class="line">       int temp = 0;</span><br><span class="line">       String text = &quot;&quot;;</span><br><span class="line">       for (int i = 0; i &lt; point; i++) &#123;</span><br><span class="line">           int number = sc.nextInt();</span><br><span class="line">           sc.nextLine();</span><br><span class="line">           int Pk[] = new int[number];</span><br><span class="line">           String Pkchar[] = new String[number];</span><br><span class="line"></span><br><span class="line">           text = sc.nextLine();</span><br><span class="line">           Pkchar = text.split(&quot; &quot;);</span><br><span class="line"></span><br><span class="line">           for (int j = 0; j &lt; Pkchar.length; j++) &#123;</span><br><span class="line">               if (Pkchar[j].equals(&quot;A&quot;)) &#123;</span><br><span class="line">                   Pk[count] = 1;</span><br><span class="line">                   count++;</span><br><span class="line">               &#125; else if (Pkchar[j].equals(&quot;J&quot;)) &#123;</span><br><span class="line">                   Pk[count] = 11;</span><br><span class="line">                   count++;</span><br><span class="line">               &#125; else if (Pkchar[j].equals(&quot;Q&quot;)) &#123;</span><br><span class="line">                   Pk[count] = 12;</span><br><span class="line">                   count++;</span><br><span class="line">               &#125; else if (Pkchar[j].equals(&quot;K&quot;)) &#123;</span><br><span class="line">                   Pk[count] = 13;</span><br><span class="line">                   count++;</span><br><span class="line">               &#125; else if (Pkchar[j] != &quot; &quot;) &#123;</span><br><span class="line">                   Pk[count] = Integer.valueOf(Pkchar[j]);</span><br><span class="line">                   count++;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           //排序</span><br><span class="line">           for (int a = 0; a &lt; Pk.length; a++) &#123;</span><br><span class="line">               for (int j = a + 1; j &lt; Pk.length; j++) &#123;</span><br><span class="line">                   if (Pk[a] &gt; Pk[j]) &#123;</span><br><span class="line">                       temp = Pk[a];</span><br><span class="line">                       Pk[a] = Pk[j];</span><br><span class="line">                       Pk[j] = temp;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           int cd = 0;</span><br><span class="line">           int add = 0;</span><br><span class="line">           int result = 0;</span><br><span class="line">           for (int k = 1; k &lt; Pk.length; k++) &#123;</span><br><span class="line"></span><br><span class="line">               if (Pk[k - 1] + 1 == Pk[k])</span><br><span class="line">                   cd++;</span><br><span class="line">               else if (Pk[k - 1] == Pk[k])</span><br><span class="line">                   add++;</span><br><span class="line">               else</span><br><span class="line">                   cd = 0;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           if (cd &gt;= 4) &#123;</span><br><span class="line">               for (int sum = 0; sum &lt; cd - 2; sum++)</span><br><span class="line">                   result += sum;</span><br><span class="line">               if (add != 0)</span><br><span class="line">                   result *= add * 2;</span><br><span class="line">               saveAns[i] = result;</span><br><span class="line">           &#125;</span><br><span class="line">           count = 0;</span><br><span class="line">       &#125;</span><br><span class="line">       for (int i = 0; i &lt; point; i++)</span><br><span class="line">           System.out.println(saveAns[i]);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开始准备实习了，自己对java的熟悉度还是太低了，在写题的过程中，有许多基础的东西，完全忘了是怎么用的，啥意思也不知道，也许连一些语法都和c混了，所以在此开始对于牛客里面一些编程题的自己还没彻底掌握的东西，做一些总结。&lt;br&gt;同时也要谢谢牛客网，这个网站，确实很棒，还能参考
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Past_exp1</title>
    <link href="https://ronjod.github.io/2019/04/02/Past-exp1/"/>
    <id>https://ronjod.github.io/2019/04/02/Past-exp1/</id>
    <published>2019-04-02T14:40:02.000Z</published>
    <updated>2019-04-03T02:28:59.722Z</updated>
    
    <content type="html"><![CDATA[<p>算是一次比较规的电话面试，汲取教训，勉励下自己。<br>即使感觉面试官挺好的，但由于自己真的是没什么准备，写一下重温面试中一些失败的地方<br><img src="/2019/04/02/Past-exp1/ComTitle.png" alt><br>首先是关于项目,由于搭建了前端，就只能是这方面了，关于前端组件，数据的格式，是怎么封装的，但我觉得当时是爬取时就做了处理了，前端接受的时候没干啥二，一会瞅瞅，<br>然后关于数据的发送这一整套是经过了什么样的流程，servlet吗可能相关<br>那么偏基础这一块，我觉得一个明明是一个超基础的东西，但是我还是混淆了，欸也需要重温，好好整理复习，<br>最后sql方面的问题，或多或少涉及，结果我连个查询都没整出来，还连题目是啥都没整太清楚，不过现在一想，明明自己清楚什么是pvuv了，当时怎么给忘了明明我还写博客，太菜了自己，羞愧-呜呜~<br>只是想查询每天的用户uv和pv，现在想想重温思路，表是日期，用户id，还有操作，三个字段<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ PV(访问量)：即 Page View, 具体是指网站的是页面浏览量或者点击量，页面被刷新一次就计算一次。如果网站被刷新了1000次，那么流量统计工具显示的PV就是1000 。</span><br><span class="line"></span><br><span class="line">$ UV(独立访客)：即 Unique Visitor,访问您网站的一台电脑客户端为一个访客。00:00-24:00内相同的客户端只被计算一次。</span><br></pre></td></tr></table></figure></p><p>按照现在的理解的话，pv的次数可以无限因为不同动作而一直添加，uv怎不然，所以查询的话，额，怎么单独插来着</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;算是一次比较规的电话面试，汲取教训，勉励下自己。&lt;br&gt;即使感觉面试官挺好的，但由于自己真的是没什么准备，写一下重温面试中一些失败的地方&lt;br&gt;&lt;img src=&quot;/2019/04/02/Past-exp1/ComTitle.png&quot; alt&gt;&lt;br&gt;首先是关于项目,由于搭
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>about_xml</title>
    <link href="https://ronjod.github.io/2019/03/15/about-xml/"/>
    <id>https://ronjod.github.io/2019/03/15/about-xml/</id>
    <published>2019-03-15T12:44:49.000Z</published>
    <updated>2019-04-08T12:50:02.847Z</updated>
    
    <content type="html"><![CDATA[<p>xml课堂学习总结<br><a id="more"></a></p><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>这学期学了xml这门课，奥上这门课还真是不容易，从学期刚开始抢课的时候就决定要选他，但是自己zz了，就错失良机，结果啥也没得到，不过还好这学期补上了，差点面临退课，不过整个听下来，感觉还是有些意思的，也许是自己大三了，对学校也产生了眷恋了吧。那么废话不多说，作为一些给自己的小整理吧</p><p>和优秀的哲哲组队，尽管我们只有两人，但是他很好的帮我过度了前面没选上课缺乏的相关事件，灰常感谢，说起来也是因为xml，让我知道github这个简便的网站平台，可以说是我这个博客的开山之祖呢，没有xml也没有立刻有的这个博客啦，虽然一开始我是打算自己手写前端，顺便参考下所谓的html模板的，但是渐渐的发现了一片新大陆呢！具体看第一篇文章吧，有么有超链接链过去呢我瞅瞅，对唔起，感概起来废话就停不下来了。<br><strong> <a href="https://ronjod.github.io/2019/03/12/about-firstMd/">跳转链接嘿嘿</a></strong></p><h2 id="项目搭建感想"><a href="#项目搭建感想" class="headerlink" title="项目搭建感想"></a>项目搭建感想</h2><p>整个项目部署在github上，毕竟是gihub的网站嘛，还用到了Desktop端的github，确实desktop的用着清楚很多，照顾我这个命令行不熟练的人，不过用了desktop端怕是命令行越来越不熟悉了。</p><h2 id="学习相关啦"><a href="#学习相关啦" class="headerlink" title="学习相关啦"></a>学习相关啦</h2><h3 id="第一个xml文件"><a href="#第一个xml文件" class="headerlink" title="第一个xml文件"></a>第一个xml文件</h3><p>一开始很懵逼，不知道自己要干什么，学习了菜鸟和wsc的教程，感觉好像一样的，一开始也不知道难道xml可以独立显示吗，不造鸭，后来通过html的跳转进入xml页面，老师也没什么要求，就这样凑活着，个人信息以及选定的主题与所谓的数据样本。<br>关于xml的编写，真是太随性了，跟html的格式差不多，但是对于标签的命名，随性所欲，一开始我们甚至了创建了所谓的中文标签。<br>对于1个完整的xml文档，第一步就是画出树状图，然后糊里糊涂就搞出来了，之后就对着xml敲自己的图里的元素和属性了，树状图随着时间的发展也是逐渐茁壮地长大了，从一开始的0属性到出现了属性，其实我本来看教程说是元素比属性要好很多，我都不想写元素来着，但是不屑要扣分e，（我猜的）还是整了些。</p><h3 id="文件验证文档编写"><a href="#文件验证文档编写" class="headerlink" title="文件验证文档编写"></a>文件验证文档编写</h3><p>dtd和schema都能对xml文件验证，优缺点吗各有吧，贴张上课的图就不做赘述了，<br><img src="/2019/03/15/about-xml/Compare.png" alt="Compare"><br>DTD是感觉没啥注意的，一下就整完了，主要是schema比起来复杂很多了，也是有些东西应该没整明白，所以一开始消耗了很多时间，首先对于schema的引用，基本都是标准的，就是验证的时候，要在xml里注明哪个xsd文件的名字，哦对了，这里schema文件格式尾缀是xsd，对于一些碰到的卡住的地方，首先最重要的就是对与complextype这个复杂类型及简单类型simpletype的使用了，一开始没搞对，老是在里面疯狂嵌套，后来原来它可以直接作为elemnt的type直接定义一个新的自己设计的类型，也是重新了解后，设计出了日期类型的元素且这个元素拥有属性，且这个属性又有约束，嘿嘿，有点东西<br><img src="/2019/03/15/about-xml/Example.png" alt="Ex"><br>但是这个东西还是比较复杂的，每个元素可以出现的东西有时都需要写一些提前的条件，我这里就还不是特别了解，但大致是用的很愉快了<br>然后对与float类型的数据类型不知道咋设置小数位数，最后用了decimal强行凑活，这里希望有大佬告知下，<br>对于list的使用可以使一个元素允许出现多个值以表的形式，应该是的。<br>对于空值的元素该怎么设置<br><img src="/2019/03/15/about-xml/markdown-img-paste-20190315212122835.png" alt="贴图"><br>贴几个不错的学习链接<br><a href="https://blog.csdn.net/u014174328/article/details/40115743" target="_blank" rel="noopener">https://blog.csdn.net/u014174328/article/details/40115743</a><br><a href="https://www.cnblogs.com/forerver-elf/p/6838917.html" target="_blank" rel="noopener">https://www.cnblogs.com/forerver-elf/p/6838917.html</a><br><a href="https://blog.csdn.net/u014174328/article/details/40115743" target="_blank" rel="noopener">https://blog.csdn.net/u014174328/article/details/40115743</a></p><h3 id="CSS展示设计"><a href="#CSS展示设计" class="headerlink" title="CSS展示设计"></a>CSS展示设计</h3><p>初步使用CSS来展示xml内容，但实际上用xslt比较好。<br>一上来就因为文件链接搞了会，最后居然是因为名字后忘记写.css了，晕死低级错误，对于href的链接使用../返回上一级，之后就是对与显示的换行问题，整了半天，居然是因为display没有设成block，设成block后就会默认作为块元素而换行了<br>示例：<br>官方文档 <a href="http://www.w3school.com.cn/xml/xml_display.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/xml/xml_display.asp</a><br>别人的学习笔记 <a href="https://www.cnblogs.com/little-YTMM/p/5986101.html" target="_blank" rel="noopener">https://www.cnblogs.com/little-YTMM/p/5986101.html</a><br><strong> 03/19 </strong><br>可以通过css的::before和after来对一个xml元素添加文字也可以进行元素的属性显示了<br><img src="/2019/03/15/about-xml/markdown-img-paste-20190319085327176.png" alt="css文件"><br><img src="/2019/03/15/about-xml/markdown-img-paste-20190319085744371.png" alt="css文件"></p><h3 id="xsl练习"><a href="#xsl练习" class="headerlink" title="xsl练习"></a>xsl练习</h3><p><img src="/2019/03/15/about-xml/markdown-img-paste-20190322155720543.png" alt="介绍"><br>XSL 包括三部分：<br>XSLT<br>一种用于转换 XML 文档的语言。<br>XPath<br>一种用于在 XML 文档中导航的语言。<br>XSL-FO<br>一种用于格式化 XML 文档的语言。</p><p>在一开始的xsl练习使用w3c的例子中就出现了无法使用valueof的数据的问题，后来经过组员的提示，居然是因为schema的原因，一去掉就可以取值了，但是想要兼容的办法暂时还么解决<br>完成了初步的效果，算是随便整整，不过也算整明白了xsl的用途，他能把xml和html结合达成一个页面的转换，还是挺神奇的，其中对xpath的使用一开始没整明白，不过用着用着就整出感觉了，期间还有个问题，就是不能直接引用链接图片，除非是搞到本地。</p><p><img src="/2019/03/15/about-xml/xml.png" alt="xml样本展示"><br><img src="/2019/03/15/about-xml/xml2.png" alt="代码"><br><img src="/2019/03/15/about-xml/xml3.png" alt="对图片的使用"></p><h3 id="SVG练习"><a href="#SVG练习" class="headerlink" title="SVG练习"></a>SVG练习</h3><p>Svg图标作为一个越来越实用的矢量图标，由于不存在失真，导致图形的显示总是那么完美。hhh</p><p>要开始SVG练习了，设计一个图标嘿嘿。<br>里面有SVG的一些相关高大上的实践和介绍，感觉是挺棒的<br><a href="https://www.uisdc.com/tag/svg" target="_blank" rel="noopener">https://www.uisdc.com/tag/svg</a><br>参考并稍加修改的一个杯子logo<br><img src="/2019/03/15/about-xml/mySvg.png" alt="杯子"></p><h3 id="XQuery练习"><a href="#XQuery练习" class="headerlink" title="XQuery练习"></a>XQuery练习</h3><p>xQuery作为一个xml里的搜索语句，需要有xpath的基础，然后在我看来与xslt也蛮相似的。<br>由于我在xml里设定了一些schema独有的数据类型，本来以为无法对其进行判断，后来发现可以利用字符串的特点进行排序，暂时这么解决把。<br>用contain方法可以对字符串包含进行搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT CatalogDescription.query(&apos;</span><br><span class="line">     declare namespace p1=&quot;https://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription&quot;;</span><br><span class="line">    for $f in /p1:ProductDescription/p1:Features/*</span><br><span class="line">     where contains(string($f), &quot;maintenance&quot;)</span><br><span class="line">     return</span><br><span class="line">           $f &apos;) as Result</span><br><span class="line">FROM Production.ProductModel</span><br><span class="line">WHERE ProductModelID=19</span><br></pre></td></tr></table></figure></p><h3 id="SAX练习"><a href="#SAX练习" class="headerlink" title="SAX练习"></a>SAX练习</h3><p>先塞几个网站，之后看<br><a href="https://www.cnblogs.com/anni-qianqian/p/5243546.html" target="_blank" rel="noopener">https://www.cnblogs.com/anni-qianqian/p/5243546.html</a><br><a href="https://blog.csdn.net/w2393040183/article/details/51915946" target="_blank" rel="noopener">https://blog.csdn.net/w2393040183/article/details/51915946</a><br>这个貌似无关紧要 <a href="https://blog.csdn.net/yandavid/article/details/9064993" target="_blank" rel="noopener">https://blog.csdn.net/yandavid/article/details/9064993</a><br>这个太高端 没整太明白 <a href="https://www.ibm.com/developerworks/cn/xml/x-xjavaxquery/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/xml/x-xjavaxquery/</a><br><strong>未完待续。。。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;xml课堂学习总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="xml" scheme="https://ronjod.github.io/categories/xml/"/>
    
    
      <category term="今天是3.15呢，我的柜子日，hhhh，" scheme="https://ronjod.github.io/tags/%E4%BB%8A%E5%A4%A9%E6%98%AF3-15%E5%91%A2%EF%BC%8C%E6%88%91%E7%9A%84%E6%9F%9C%E5%AD%90%E6%97%A5%EF%BC%8Chhhh%EF%BC%8C/"/>
    
  </entry>
  
  <entry>
    <title>about_firstMd</title>
    <link href="https://ronjod.github.io/2019/03/12/about-firstMd/"/>
    <id>https://ronjod.github.io/2019/03/12/about-firstMd/</id>
    <published>2019-03-12T12:39:05.000Z</published>
    <updated>2019-04-09T07:56:13.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>嘿嘿，决定使用Blog来为自己的生活增添点色调，其实可以装个逼hh，也是为了记录和总结自己的生活啦，那么机缘巧合，就知道了这么个github的网页博客，在我看来确实很高档次又相对有趣的一个玩意，那么为了纪念这个可爱的博客的诞生，尽管最近很忙，但还是想在这个种树节来为自己写第一篇文章吧，第一次使用所以出了好多小问题，如果可以的话<a href="https://www.bilibili.com/video/av39808211" target="_blank" rel="noopener">bilibil</a>，hexo官网也有全套的关于hexo的教程，大家可以立刻看懂我认为，我也同时会慢慢学习，首先其实网络上相对的教程很多的，我也看了好多，但还是想写写自己的博客搭建之旅，首先对于github这个东东我老早就有了，虽然作为一个大学生刚用的时候还不是很熟练，且项目的机会不多导致用的不频繁，而且我现在写的md文法我也是第一次用hh，那么github的注册这里就不介绍了。git命令行的安装和使用这里也不介绍啦，有问题的话欢迎提问嘿嘿！</p><h3 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Nodejs</a></h3><p>在使用hexo之前需要先下载nodejs,点击链接<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a>按着自己的电脑选择安装就好了，作者这里是windows，安装过程没有什么特殊情况一路就装完了，系统应用上会多了两个应用程序，我也没管他了，本人用了git的命令行进行操作的，但我认为用nodejs进入命令行打命令应该也米什么问题.</p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a></h3><p>点击上面hexo的标题可以直接进入官网查看文档，进去后下面有个立即使用会出现和b站里一样内容的视频教学,我这里先从选择hexo开始了，听说jekyll是git推荐的搭博客工具，但经过网站的浏览我还是选择了这个hexo来做为自己的首选工具，使用命令</p><p><img src="/2019/03/12/about-firstMd/10.png" alt="图10"><br>这里不用担心什么安装路径啥的，点完应该是默认装在你系统里面的，后面才是正式位置的安装。推荐大家新建一个文件夹，作者这里就是在d盘建立了一个hexo的文件夹，大家可以通过cd命令进入d盘 这里用gitbash在里面输入的命令是<br>cd d:<br>推荐大家用截图的方法，比较科学</p><p><img src="/2019/03/12/about-firstMd/11.png" alt="图1"><br>安装完后发现里面有这些东东</p><p><img src="/2019/03/12/about-firstMd/4.png" alt="图4"><br><strong> node_modules: 依赖包</strong><br><strong> public：存放生成的页面</strong><br><strong> scaffolds：生成文章的一些模板</strong><br><strong> source：用来存放你的文章</strong><br><strong> themes：主题</strong><br><strong> _config.yml: 博客的配置文件</strong><br>引用的内容及下面的一些图片均来自配置教学1里的内容o，具体可以在下面的链接点击查看</p><h3 id="主题配置篇"><a href="#主题配置篇" class="headerlink" title="主题配置篇"></a>主题配置篇</h3><p>打开<strong> _config.yml</strong>，会发现里面东西很多，在此之前需要有一个github里的网站作为要部署的地方，e，其实挺简单的，那也顺便贴几张图吧<br>先登陆进去<br><img src="/2019/03/12/about-firstMd/5.jpg" alt="图5"><br><img src="/2019/03/12/about-firstMd/6.jpg" alt="图6"><br>我以前创建网站的时候好像还有一步，但是似乎没事就先不管了。<br>这之后有需要一些ssh的配置来关联你本地和网站内容，这里可以继续参考配置教学1，我就不多叙述了。</p><p>继续一开始的打开那个文件，里面一些名字你就根据想写的填上去，欸，懒得贴图了，就是这么一回事，大佬写的都挺详细的，我自己也还没开始怎么改里面的内容<br>注意<strong>关于yml尾缀的文件 有个很重要的语法格式，就是在冒号后写内容要加空格</strong><br>我直接就将创建第一遍文章吧，主题方面，大家可以参考hexo主题官网，直接整个下载解压到thema里面，然后在最外面的yml里面找到thema，默认是landscape，把它改成你解压后文件的名字，这里我选择了下面漂亮小姐姐的主题，对于主题里也还有一个yml，也有许多需要修改的，我自己也还没修改额。<br><img src="/2019/03/12/about-firstMd/7.png" alt="图7"><br>里面的deploy要贴好自己的网址，其他格式就和我的一样就行，主题那个是我用的别人的主题。修改好在命令行中执行</p><p><img src="/2019/03/12/about-firstMd/8.png" alt="图8"><br>执行后参考了别人的采坑建议</p><p><img src="/2019/03/12/about-firstMd/9.png" alt="图9"></p><h3 id="写第一篇文章"><a href="#写第一篇文章" class="headerlink" title="写第一篇文章"></a>写第一篇文章</h3><p>要创建文章之后还是敲命令，打开命令行，里面有些需要注意的地方<br><strong>hexo n “博客名”</strong><br>会在source/post里生成md文件，这里暂时推荐大家先看看我下面的第一个教图片的网站链接，生成好后就可以在md文件里写东西了，编辑器方面我一开始用的subline，后来又用了atom，其实我觉得文本编辑也可以凑活。随便写好后，保存，在命令行 ，按照之前教程教我的习惯 就是固定敲 hexo clean 再hexo g 最后hexo d 这里我也不知道为啥hexo d部署后有些时候反应慢点，你可以在hexo g 后输入hexo s<br>在网站打开localhost:4000看看长啥样先。就会有你的第一篇文章了，hexo默认有一篇使用指导的文章，你们可以瞧瞧。对于md文章其实有许多语法方面需要了解的知识，我就为了搞张图片折腾了半天，不过还是蛮满足的。<br>至此我的使用就到此结束了，总之有问题一起探讨也可以，那么我的第一篇文章暂时就结束了，可能以后会有补充，反正博客的使用一定会越来越熟练的，嘿嘿。</p><h2 id="一些配置的理解"><a href="#一些配置的理解" class="headerlink" title="一些配置的理解"></a>一些配置的理解</h2><p>原来最开始是大佬做的我还以为是个小姐姐的主题，反正是直接使用了<br>参照以下配置函数进行调整<br><a href="https://godbmw.com/passages/2019-03-03-theme-ad-docs-zh/" target="_blank" rel="noopener">https://godbmw.com/passages/2019-03-03-theme-ad-docs-zh/</a><br><a href="https://godbmw.com/passages/2018-11-15-theme-bmw-docs-zh/" target="_blank" rel="noopener">https://godbmw.com/passages/2018-11-15-theme-bmw-docs-zh/</a></p><h3 id="感谢的网站"><a href="#感谢的网站" class="headerlink" title="感谢的网站"></a>感谢的网站</h3><p>教会简单的图片添加<a href="https://blog.csdn.net/qq_40265501/article/details/80019774" target="_blank" rel="noopener">https://blog.csdn.net/qq_40265501/article/details/80019774</a><br>然而一会灵一会不灵，我也很绝望额，如果你也突然不灵的话，尝试其中一种解决方法是在md里面写的这个样子<img src="/2019/03/12/about-firstMd/3.png" alt="图例">格式为asset_img是函数名 然后就是你图片叫啥 再然后就是备注了<br>貌似还有个七牛云存储图床，我之后试试。<br>利用atom这个md编辑器平台里的插件实现对截图的快速粘贴<br>（之前原来是因为我对图片进行修改了）导致啥啥失效了<br><img src="/2019/03/12/about-firstMd/howToUseFoto.png" alt="图how"></p><p>七牛也有时间限制了欸<br><a href="https://www.jianshu.com/p/0997d0d15e55" target="_blank" rel="noopener">https://www.jianshu.com/p/0997d0d15e55</a></p><p>配置教学<br>1.<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">https://blog.csdn.net/sinat_37781304/article/details/82729029</a><br>2.<a href="https://www.cnblogs.com/dushao/p/5999593.html" target="_blank" rel="noopener">https://www.cnblogs.com/dushao/p/5999593.html</a><br>3.<a href="https://www.jianshu.com/p/2afac1bc0af8" target="_blank" rel="noopener">https://www.jianshu.com/p/2afac1bc0af8</a><br>4.hexo的使用<a href="https://www.jianshu.com/p/1c888a6b8297?utm_source=oschina-app" target="_blank" rel="noopener">https://www.jianshu.com/p/1c888a6b8297?utm_source=oschina-app</a><br>5.<a href="https://blog.csdn.net/tiweeny/article/details/78883092" target="_blank" rel="noopener">https://blog.csdn.net/tiweeny/article/details/78883092</a><br>Markdown语法基础介绍 <a href="https://www.jianshu.com/p/335db5716248" target="_blank" rel="noopener">https://www.jianshu.com/p/335db5716248</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;嘿嘿，决定使用Blog来为自己的生活增添点色调，其实可以装个逼hh，也是为了记录和总结自己的生活啦，那么机缘巧合，就知道了这么个github
      
    
    </summary>
    
    
      <category term="关于博客的搭建" scheme="https://ronjod.github.io/tags/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ronjod.github.io/2019/03/11/hello-world/"/>
    <id>https://ronjod.github.io/2019/03/11/hello-world/</id>
    <published>2019-03-11T11:36:43.387Z</published>
    <updated>2019-04-09T08:00:46.653Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ppon8df2f.bkt.clouddn.com/5UAEXO1DQT4R61@7@MM@A_X.png" alt><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="450" src="//music.163.com/outchain/player?type=0&id=2583220500&auto=1&height=430"><br>  </iframe><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://ppon8df2f.bkt.clouddn.com/5UAEXO1DQT4R61@7@MM@A_X.png&quot; alt&gt;&lt;br&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
    
  </entry>
  
</feed>
